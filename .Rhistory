df
df <- data.frame(x = as.Date(c("2014-10-04", "2014-10-08", "2014-11-06") ), y = sample(1:3, 3), label = sample(letters, 3)); ggplot(df, aes(x, y, label = rownames(df))) + geom_bar(stat = "identity") + geom_text(y = 4) + ylim(c(0, 4))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(y=0.5, label = "y")
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(y=0.5, label = rownames(results2))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=elapsed,y=accuracy, label = rownames(results2))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(results2,x=elapsed,y=accuracy, label = rownames(results2))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results2,x=elapsed,y=accuracy, label = rownames(results2))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2))
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = 2)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = -2)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = -1)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = -1) + xlim(0,90)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = -0.5) + xlim(0,90)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(x=results2$elapsed,y=results2$accuracy, label = rownames(results2), hjust = -0.5) + xlim(0,90)
p <- ggplot(results2, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results2, aes(x=elapsed,y=accuracy, label = rownames(results2), hjust = -0.5)) + xlim(0,90)
results2
results <- as.data.frame(matrix(nrow = 5, ncol = 2))
rownames(results) <- c("rpart", "lda", "gbm", "rf", "bag")
colnames(results) <- c("elapsed", "accuracy")
results
results[1,] <- c(rpartPtm, rpartAccuracy)
results
results
results <- as.data.frame(matrix(nrow = 5, ncol = 2))
rownames(results) <- c("rpart", "lda", "gbm", "rf", "bag")
colnames(results) <- c("elapsed", "accuracy")
# rpart
rpartPred <- predict(rpartModFit, testing2)
rpartAccuracy <- round(sum(rpartPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rpart model:", rpartAccuracy))
results[1,] <- c(rpartPtm, rpartAccuracy)
# gbm
gbmPred <- predict(gbmModFit, testing2)
gbmAccuracy <- round(sum(gbmPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of gbm model:", gbmAccuracy))
results[2,] <- c(gbmPtm, gbmAccuracy)
# lda
ldaPred <- predict(ldaModFit, testing2)
ldaAccuracy <- round(sum(ldaPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of lda model:", ldaAccuracy))
results[3,] <- c(ldaPtm,ldaAccuracy)
# rf
rfPred <- predict(rfModFit, testing2)
rfAccuracy <- round(sum(rfPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rf model:", rfAccuracy))
results[4,] <- c(rfPtm,rfAccuracy)
# rf2
# rf2Pred <- predict(rf2ModFit, testing2)
# rf2Accuracy <- round(sum(rf2Pred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rf model:", rf2Accuracy))
# bag
bagPred <- predict(bagModFit, testing2)
bagAccuracy <- round(sum(bagPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of treebag model:", bagAccuracy))
results[5,] <- c(bagPtm,bagAccuracy)
results
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
results
ptm <- proc.time()
bagModFit <- train(classe ~., data = smallTrain, method = "treebag")
bagPtm <- (proc.time() - ptm)[3]
ptm <- proc.time()
bagModFit <- train(classe ~., data = smallTrain, method = "treebag")
bagPtm <- (proc.time() - ptm)[3]
bagPtm
bagPred <- predict(bagModFit, testing2)
bagAccuracy <- round(sum(bagPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of treebag model:", bagAccuracy))
results[5,] <- c(bagPtm,bagAccuracy)
results
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
results
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90) + geom_rect(aes(xmin=0.87, xmax=0.92, ymin=0, ymax=10), colour=alpha("grey20", 0.5), fill.alpha=0.5)
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90) + geom_rect(aes(xmin=0.87, xmax=0.92, ymin=0, ymax=10), colour=alpha("grey20", 0.5))
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90) + geom_rect(aes(xmin=0.87, xmax=0.92, ymin=0, ymax=10))
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
ptm <- proc.time()
# rfModFit2 <- randomForest(classe ~., data = training2)
rfModFit2 <- train(classe ~., data = training2, method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm2 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm2))
print(rfModFit2$confusion)
correct <- sum(diag(rfModFit2$confusion[,c(1:5)]))
total <- sum(rfModFit2$confusion[,c(1:5)])
print(paste("In sample accuracy of the random forests algorithm:", round((correct/total),5)))
rfModFit2$finalModel
rfModFit2$results
rfModFit2$pred
rfModFit2$finalModel[3]
rfModFit2$finalModel[1]
rfModFit2$pred
rfModFit2
rfModFit2$finalModel[1]
rfModFit2$results
rfModFit2$results[2,2]
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit2$results[2,2]),5)))
rfPred2 <- predict(rfModFit2, testing2)
rfAccuracy2 <- round(sum(rfPred2 == testing2$classe)/nrow(testing2),5)
print(paste("Out of sample accuracy of random forests algorithm:", rfAccuracy2))
print(confusionMatrix(testing2$classe, rfPred2))
results
NAcol <- NULL
for (i in 1:ncol(training)) {
if(sum(!is.na(finalTest[,i])) == 0) {NAcol <- c(NAcol, i)}
}
# Columns 1,2,5,6,7 are also eliminated from the training sets
NAcol <- c(1,2,5:7,NAcol)
training2 <- training2[,-NAcol]
nzv <- nearZeroVar(training2, saveMetrics = TRUE)
print(paste(sum(nzv$nzv + nzv$zeroVar),"predictors were removed due to lack of variability."))
inTrain2 <- createDataPartition(y = training2$classe, p = 0.05, list = FALSE)
smallTrain <- training2[inTrain2,]
dim(training2)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
# take original training set and split into training (70%) and testing (30%)
training2 <- training[inTrain,]
testing2 <- training[-inTrain,]
dim(training2)
NAcol <- NULL
for (i in 1:ncol(training)) {
if(sum(!is.na(finalTest[,i])) == 0) {NAcol <- c(NAcol, i)}
}
# Columns 1,2,5,6,7 are also eliminated from the training sets
NAcol <- c(1,2,5:7,NAcol)
training2 <- training2[,-NAcol]
dim(training2)
nzv <- nearZeroVar(training2, saveMetrics = TRUE)
print(paste(sum(nzv$nzv + nzv$zeroVar),"predictors were removed due to lack of variability."))
# create small practice training set
inTrain2 <- createDataPartition(y = training2$classe, p = 0.05, list = FALSE)
smallTrain <- training2[inTrain2,]
# rpartModFit - recursive partitioning method
ptm <- proc.time()
rpartModFit <- train(classe ~., data = smallTrain, method = "rpart")
rpartPtm <- (proc.time() - ptm)[3]  # record total elapsed time
# gbmModFit - boosted trees method
ptm <- proc.time()
gbmModFit <- train(classe ~., data = smallTrain, method = "gbm", verbose = FALSE)
gbmPtm <- (proc.time() - ptm)[3]
# ldaModFit - linear discriminant analysis method
ptm <- proc.time()
ldaModFit <- train(classe ~., data = smallTrain, method = "lda")
ldaPtm <- (proc.time() - ptm)[3]
# rfModFit - random forests method
# library(randomForest)
# ptm <- proc.time()
# rfModFit <- randomForest(classe ~., data = smallTrain)
# rfPtm <- (proc.time() - ptm)[3]
# rfModFit - random forests, k-fold (number = 5) cross validation
ptm <- proc.time()
rfModFit <- train(classe ~., data = smallTrain, method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm <- (proc.time() - ptm)[3]
# bagModFit - bagging method using "treebag" method
ptm <- proc.time()
bagModFit <- train(classe ~., data = smallTrain, method = "treebag")
bagPtm <- (proc.time() - ptm)[3]
# Calculate and record results
# initialize evaluation results data frame
results <- as.data.frame(matrix(nrow = 5, ncol = 2))
rownames(results) <- c("rpart", "lda", "gbm", "rf", "bag")
colnames(results) <- c("elapsed", "accuracy")
# rpart
rpartPred <- predict(rpartModFit, testing2)
rpartAccuracy <- round(sum(rpartPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rpart model:", rpartAccuracy))
results[1,] <- c(rpartPtm, rpartAccuracy)
# gbm
gbmPred <- predict(gbmModFit, testing2)
gbmAccuracy <- round(sum(gbmPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of gbm model:", gbmAccuracy))
results[2,] <- c(gbmPtm, gbmAccuracy)
# lda
ldaPred <- predict(ldaModFit, testing2)
ldaAccuracy <- round(sum(ldaPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of lda model:", ldaAccuracy))
results[3,] <- c(ldaPtm,ldaAccuracy)
# rf
rfPred <- predict(rfModFit, testing2)
rfAccuracy <- round(sum(rfPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rf model:", rfAccuracy))
results[4,] <- c(rfPtm,rfAccuracy)
# rf2
# rf2Pred <- predict(rf2ModFit, testing2)
# rf2Accuracy <- round(sum(rf2Pred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of rf model:", rf2Accuracy))
# bag
bagPred <- predict(bagModFit, testing2)
bagAccuracy <- round(sum(bagPred == testing2$classe)/nrow(testing2),4)
# print(paste("Accuracy of treebag model:", bagAccuracy))
results[5,] <- c(bagPtm,bagAccuracy)
print(results)
print(results)
# qplot(y = as.numeric(results[2,]), x = as.numeric(results[1,]), colour = names(results), xlab = "Processing time", ylab = "Accuracy", main = "Evaluation - Machine Learning Algorithms")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
gbmAccuracy
gbmPtm
results
qplot(y = results$accuracy, x = results$elapsed, colour = names(results), xlab = "Processing time", ylab = "Accuracy", main = "Machine Learning Methods")
qplot(data = results,y = accuracy, x = elapsed, colour = names(results), xlab = "Processing time", ylab = "Accuracy", main = "Machine Learning Methods")
qplot(y = results[,2], x = results[,1], colour = names(results), xlab = "Processing time", ylab = "Accuracy", main = "Machine Learning Methods")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods")
p + geom_point() + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(color = factor(names)) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(color = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point(aes(colour = factor(names))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods")
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point() + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p <- ggplot(results, aes(x = elapsed, y = accuracy))
p + geom_point() + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point() + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point()
p + geom_point(aes(color = c("red","blue","green","gray",purple)))
p + geom_point(aes(color = c("red","blue","green","gray","purple")))
p + geom_point(aes(color = factor(names(results)))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point(aes(color = factor(rownames(results)))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point(aes(color = rownames(results))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p <- ggplot(results, aes(x = elapsed, y = accuracy))
# p + geom_point() + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
p + geom_point(aes(color = rownames(results))) + labs(x = "Processing Time", y = "Accuracy", title = "Machine Learning methods ") + geom_text(data = results, aes(x=elapsed,y=accuracy, label = rownames(results), hjust = -0.5)) + xlim(0,90)
rfModFit2$perfNames
rfModFit2$trainingData
rfModFit2$results
varImp(rfModFit2)
dim(training2)
names(training2)
varImp(rfModFit2)
import2 <- varImp(rfModFit2)[1:10]
import2
import2 <- varImp(rfModFit2)[1:10,]
import2 <- varImp(rfModFit2)[,1:10]
varImp(rfModFit2)
varImp(rfModFit2)[1]
varImp(rfModFit2)$importance
order(varImp(rfModFit2)$importance, descending = TRUE)
order(varImp(rfModFit2)$importance)
order(varImp(rfModFit2)$importance, ascending = FALSE)
order(varImp(rfModFit2)$importance, decreasing = TRUE)
import
rfPred2 <- predict(rfModFit2, testing2)
rfAccuracy2 <- round(sum(rfPred2 == testing2$classe)/nrow(testing2),5)
print(paste("Out of sample accuracy of random forests algorithm:", rfAccuracy2))
print(confusionMatrix(testing2$classe, rfPred2))
ptm <- proc.time()
# rfModFit2 <- randomForest(classe ~., data = training2)
rfModFit2 <- train(classe ~., data = training2[,c(import,55)], method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm2 <- (proc.time() - ptm)[3]
rfPtm2
ptm <- proc.time()
rfModFit3 <- train(classe ~., data = training2[,c(import,55)], method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm3 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm3))
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit3$results[2,2]),5)))
ptm <- proc.time()
rfModFit3 <- train(classe ~., data = training2[,c(import[1:8],55)], method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm3 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm3))
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit3$results[2,2]),5)))
varImp(rfModFit2)
print(varImp(rfModFit2))
varImp(rfModFit2)$importance
rfPred2 <- predict(rfModFit2, testing2)
rfAccuracy2 <- round(sum(rfPred2 == testing2$classe)/nrow(testing2),5)
print(paste("Out of sample accuracy of random forests algorithm:", rfAccuracy2))
print(confusionMatrix(testing2$classe, rfPred2))
varImp(rfModFit)$importance
order(varImp(rfModFit)$importance)
order(varImp(rfModFit)$importance, decreasing = TRUE)
dim(testing2)
ptm <- proc.time()
# rfModFit2 <- randomForest(classe ~., data = training2)
rfModFit2 <- train(classe ~., data = training2, method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm2 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm2))
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit2$results[2,2]),5)))
print(varImp(rfModFit2))
print(varImp(rfModFit2)[1:12])
head(varImp(rfModFit2))
print(varImp(rfModFit2)$importance[ordervarImp(rfModFit2)$importance])
print(varImp(rfModFit2)$importance[order(varImp(rfModFit2)$importance)])
order(varImp(rfModFit2)$importance)
import = order(varImp(rfModFit)$importance, decreasing = TRUE)[1:12]
print(import)
order(varImp(rfModFit2)$importance
)
varImp(rfModFit2)$importance
varImp(rfModFit2)$importance[1:10]
dim(varImp(rfModFit2)$importance)
varImp(rfModFit2)$importance$Overall
head(varImp(rfModFit2)$importance)
head(varImp(rfModFit2)$importance,12)
varImp(rfModFit2)$importance[1:12]
varImp(rfModFit2)$importance
varImp(rfModFit2)
print(varImp(rfModFit2))
import = order(varImp(rfModFit2)$importance, decreasing = TRUE)[1:8]
# traing the model on the training2 dataset with only the top 8 variables
ptm <- proc.time()
rfModFit3 <- train(classe ~., data = training2[,c(import[1:8],55)], method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm3 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm3))
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit3$results[2,2]),5)))
import = order(varImp(rfModFit2)$importance, decreasing = TRUE)[1:8]
# traing the model on the training2 dataset with only the top 8 variables
ptm <- proc.time()
rfModFit3 <- train(classe ~., data = training2[,c(import[1:8],55)], method = "rf", trControl = trainControl(method = "cv", number = 5), ntree = 100)
rfPtm3 <- (proc.time() - ptm)[3]
print(paste("Processing time for rf method on training2 dataset:",rfPtm3))
print(paste("In sample accuracy of the random forests algorithm:", round((rfModFit3$results[2,2]),5)))
View(adData)
rm(list=ls())
rm(list=ls())
shiny::runApp('DevelopingDataProducts/ShinyProject')
shiny::runApp('DevelopingDataProducts/ShinyProject')
shiny::runApp('DevelopingDataProducts/ShinyProject')
runApp('DevelopingDataProducts/ShinyProject')
shiny::runApp('DevelopingDataProducts/ShinyProject')
shiny::runApp('DevelopingDataProducts/ShinyProject')
runApp('DevelopingDataProducts/ShinyProject')
shiny::runApp('DevelopingDataProducts/ShinyProject')
runApp('DevelopingDataProducts/ShinyProject')
getwd()
setwd("/Users/gardiner/rprogramming/DevelopingDataProducts/first_deck")
getwd()
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("/Users/gardiner/rprogramming/DevelopingDataProducts/first_dck")
slidify("index.Rmd")
slidify("index.Rmd")
getwd
getwd()
setwd("/Users/gardiner/rprogramming/DevelopingDataProducts")
getwd()
author("ShinyProj")
author("ShinyProject")
getwd()
setwd("/Users/gardiner/rprogramming/DevelopingDataProducts")
author("ShinyProject")
runApp()
getwd()
setwd("/Users/gardiner/rprogramming/DevelopingDataProducts")
author("ShinyProjectSlidify")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
# Read standings dataset
Standings <<- read.csv("standings2016.csv")
Standings$Team <<- as.character(Standings$Team)
Standings$Home <<- as.character(Standings$Home)
week <- 38  # week 38 (final week of the season) for the plot
plotStandings <<- function(week) {
standings <- subset(Standings, Week == week)
standings <- standings[order(standings$Cumulative, decreasing = TRUE),]
standings <- standings[,c("Team", "Cumulative")]
standings$fill <- c(rep("lightcyan",3), rep("lightblue",17))
# print(standings)
s20 <- ggplot(standings, aes(y = Cumulative, x = reorder(Team,Cumulative))) +
geom_bar(stat='identity', fill = standings$fill) +
# geom_bar(stat='identity') +
# scale_fill_gradient(low="#FF8888",high="#FF0000") +
xlab("") + ylab("Total Points") +
ggtitle(paste("EPL Standings after Week",week)) +
geom_text(aes(label=Cumulative), position=position_dodge(width=0.9),
vjust=0.5, size = 3) +
coord_flip()
s20
}
Standings <<- read.csv("standings2016.csv")
Standings$Team <<- as.character(Standings$Team)
Standings$Home <<- as.character(Standings$Home)
week <- 38  # week 38 (final week of the season) for the plot
getwd()
head(Standings)
Standings$Team <<- as.character(Standings$Team)
Standings <- read.csv("standings2016.csv")
Standings$Team <- as.character(Standings$Team)
Standings$Home <- as.character(Standings$Home)
# Read standings dataset
Standings <- read.csv("standings2016.csv")
Standings$Team <- as.character(Standings$Team)
Standings$Home <- as.character(Standings$Home)
week <- 38  # week 38 (final week of the season) for the plot
plotStandings <<- function(week) {
standings <- subset(Standings, Week == week)
standings <- standings[order(standings$Cumulative, decreasing = TRUE),]
standings <- standings[,c("Team", "Cumulative")]
standings$fill <- c(rep("lightcyan",3), rep("lightblue",17))
# print(standings)
s20 <- ggplot(standings, aes(y = Cumulative, x = reorder(Team,Cumulative))) +
geom_bar(stat='identity', fill = standings$fill) +
# geom_bar(stat='identity') +
# scale_fill_gradient(low="#FF8888",high="#FF0000") +
xlab("") + ylab("Total Points") +
ggtitle(paste("EPL Standings after Week",week)) +
geom_text(aes(label=Cumulative), position=position_dodge(width=0.9),
vjust=0.5, size = 3) +
coord_flip()
s20
}
plotStandings(week)
# Read standings dataset
Standings <- read.csv("standings2016.csv")
Standings$Team <- as.character(Standings$Team)
Standings$Home <- as.character(Standings$Home)
plotStandings <<- function(week) {
standings <- subset(Standings, Week == week)
standings <- standings[order(standings$Cumulative, decreasing = TRUE),]
standings <- standings[,c("Team", "Cumulative")]
standings$fill <- c(rep("lightcyan",3), rep("lightblue",17))
# print(standings)
s20 <- ggplot(standings, aes(y = Cumulative, x = reorder(Team,Cumulative))) +
geom_bar(stat='identity', fill = standings$fill) +
# geom_bar(stat='identity') +
# scale_fill_gradient(low="#FF8888",high="#FF0000") +
xlab("") + ylab("Total Points") +
ggtitle(paste("EPL Standings after Week",week)) +
geom_text(aes(label=Cumulative), position=position_dodge(width=0.9),
vjust=0.5, size = 3) +
coord_flip()
s20
}
week <- 38  # week 38 (final week of the season) for the plot
plotStandings(week)
slidify("index.Rmd")
# Read standings dataset
Standings <- read.csv("standings2016.csv")
Standings$Team <- as.character(Standings$Team)
Standings$Home <- as.character(Standings$Home)
plotStandings <<- function(week) {
standings <- subset(Standings, Week == week)
standings <- standings[order(standings$Cumulative, decreasing = TRUE),]
standings <- standings[,c("Team", "Cumulative")]
standings$fill <- c(rep("lightcyan",3), rep("lightblue",17))
# print(standings)
s20 <- ggplot(standings, aes(y = Cumulative, x = reorder(Team,Cumulative))) +
geom_bar(stat='identity', fill = standings$fill) +
# geom_bar(stat='identity') +
# scale_fill_gradient(low="#FF8888",high="#FF0000") +
xlab("") + ylab("Total Points") +
ggtitle(paste("EPL Standings after Week",week)) +
geom_text(aes(label=Cumulative), position=position_dodge(width=0.9),
vjust=0.5, size = 3) +
coord_flip()
s20
}
week <- 38  # week 38 (final week of the season) for the plot
plotStandings(week)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
head(pred)
head(pred)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
runApp('~/rprogramming/DevelopingDataProducts/ShinyProject')
